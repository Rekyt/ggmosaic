% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom-mosaic.r, R/stat-mosaic.r
\name{geom_mosaic}
\alias{geom_mosaic}
\alias{stat_mosaic}
\title{Mosaic plots.}
\usage{
geom_mosaic(mapping = NULL, data = NULL, stat = "mosaic",
  position = "identity", na.rm = FALSE, divider = mosaic(),
  offset = 0.01, show.legend = NA, inherit.aes = FALSE, label = FALSE,
  ...)

stat_mosaic(mapping = NULL, data = NULL, geom = "mosaic",
  position = "identity", na.rm = TRUE, divider = mosaic(),
  show.legend = NA, inherit.aes = TRUE, offset = 0.01, ...)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link{aes}} or
\code{\link{aes_}}. If specified and \code{inherit.aes = TRUE} (the
default), it is combined with the default mapping at the top level of the
plot. You must supply \code{mapping} if there is no plot mapping.}

\item{data}{The data to be displayed in this layer. There are three
   options:

   If \code{NULL}, the default, the data is inherited from the plot
   data as specified in the call to \code{\link{ggplot}}.

   A \code{data.frame}, or other object, will override the plot
   data. All objects will be fortified to produce a data frame. See
   \code{\link{fortify}} for which variables will be created.

   A \code{function} will be called with a single argument,
   the plot data. The return value must be a \code{data.frame.}, and
   will be used as the layer data.}

\item{stat}{The statistical transformation to use on the data for this
layer, as a string.}

\item{position}{Position adjustment, either as a string, or the result of
a call to a position adjustment function.}

\item{na.rm}{If \code{FALSE} (the default), removes missing values with a warning. If \code{TRUE} silently removes missing values.}

\item{divider}{Divider function. The default divider function is mosaic() which will use spines in alternating directions. The four options for partioning:
\itemize{
\item \code{vspine} Vertical spine partition: width constant, height varies.
\item \code{hspine}  Horizontal spine partition: height constant, width varies.
\item \code{vbar} Vertical bar partition: height constant, width varies.
\item \code{hbar}  Horizontal bar partition: width constant, height varies.
}}

\item{offset}{Set the space between the first spine}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link{borders}}.}

\item{label}{If \code{TRUE} include labels for all rectangles}

\item{...}{other arguments passed on to \code{layer}. These are often aesthetics, used to set an aesthetic to a fixed value, like \code{color = 'red'} or \code{size = 3}. They may also be parameters to the paired geom/stat.}

\item{geom}{The geometric object to use display the data}
}
\description{
A mosaic plot is a convenient graphical summary of the conditional ditributions
in a contingency table and is composed of spines in alternating directions.

XXX fill at the moment is always the last variable - even if the same variable shows up ... we should respect the order when the variable is explicitly listed in the formula
}
\section{Computed variables}{

\describe{
\item{xmin}{location of bottom left corner}
\item{xmax}{location of bottom right corner}
\item{ymin}{location of top left corner}
\item{ymax}{location of top right corner}
}
}
\examples{

data(Titanic)
titanic <- as.data.frame(Titanic)
titanic$Survived <- factor(titanic$Survived, levels=c("Yes", "No"))


ggplot(data=titanic) +
  geom_mosaic(aes(weight=Freq, x=product(Class), fill=Survived))
# good practice: use the 'dependent' variable (or most important variable)
# as fill variable
ggplot(data=titanic) +
  geom_mosaic(aes(weight=Freq, x=product(Class, Age), fill=Survived))
ggplot(data=titanic) +
  geom_mosaic(aes(weight=Freq, x=product(Class), conds=product(Age), fill=Survived))
gg <- ggplot(data=titanic) +
        geom_mosaic(aes(weight=Freq, x=product(Survived, Class), fill=Age))
gg

# we should try to get something along these lines to work. Maybe write a labelling
# function?
gg + geom_text(aes(x = (xmin+xmax)/2, y = (ymin+ymax)/2,
                    label=paste(x1, x2, sep="\\n")),
               data=subset(ggplot_build(gg)$data[[1]], level==2))
ggplot(data=titanic) +
        geom_mosaic(aes(weight=Freq, x=product(Survived, Class), fill=Age), label = TRUE)


# doing the right thing, but we need labelling to make it less confusing


ggplot(data=titanic) +
  geom_mosaic(aes(weight=Freq, x=product(Survived, Class),
                  conds = Age))
ggplot(data=titanic) + geom_mosaic(aes(weight=Freq, x=product(Class, Age),
                                       fill=Survived))

data(happy, package="productplots")

ggplot(data = happy) + geom_mosaic(aes(x=product(happy)))
ggplot(data = happy) + geom_mosaic(aes(x=product(happy)), divider=mosaic("h"))
ggplot(data = happy) + geom_mosaic(aes(x=product(happy)), divider=mosaic("h")) +
  coord_flip()
# weighting is important
ggplot(data = happy) +
  geom_mosaic(aes(weight=wtssall, x=product(happy)), divider=mosaic("h"))
ggplot(data = happy) + geom_mosaic(aes(weight=wtssall, x=product(health), fill=happy)) +
  theme(axis.text.x=element_text(angle=35))
ggplot(data = happy) +
  geom_mosaic(aes(weight=wtssall, x=product(health), fill=happy), na.rm=TRUE)
ggplot(data = happy) +
  geom_mosaic(aes(weight=wtssall, x=product(health, sex, degree), fill=happy),
  na.rm=TRUE)

# here is where a bit more control over the spacing of the bars is helpful:
# set labels manually:
ggplot(data = happy) +
  geom_mosaic(aes(weight=wtssall, x=product(age), fill=happy), na.rm=TRUE, offset=0) +
  scale_x_product("Age", labels=c(17+1:72, "NA"))
# thin out labels manually:
labels <- c(17+1:72, NA)
labels[labels \%\% 5 != 0] <- ""
ggplot(data = happy) +
  geom_mosaic(aes(weight=wtssall, x=product(age), fill=happy), na.rm=TRUE, offset=0) +
  scale_x_product("Age", labels=labels)
ggplot(data = happy) +
  geom_mosaic(aes(weight=wtssall, x=product(age), fill=happy, conds = sex),
  divider=mosaic("v"), na.rm=TRUE, offset=0.001) +
  scale_x_product("Age", labels=labels)
# facetting works!!!!
ggplot(data = happy) +
  geom_mosaic(aes(weight=wtssall, x=product(age), fill=happy), na.rm=TRUE, offset = 0) +
  facet_grid(sex~.) +
  scale_x_product("Age", labels=labels)

ggplot(data = happy) +
  geom_mosaic(aes(weight = wtssall, x = product(happy, finrela, health)),
  divider=mosaic("h"))
ggplot(data = happy) +
  geom_mosaic(aes(weight = wtssall, x = product(happy, finrela, health)), offset=.005)

data(rochdale)
ggplot(data=rochdale) +
  geom_mosaic(aes(x=product(Husband.sEduc, Child), fill=Household),
              divider=ddecker(), na.rm=FALSE) + coord_flip()
ggplot(data=rochdale) +
  geom_mosaic(aes(x=product(Wife.sEduc, Child), fill=Household),
              divider=ddecker(), na.rm=FALSE) + coord_flip()
ggplot(data=rochdale) +
  geom_mosaic(aes(x=product(Wife.sEduc,Husband.sEduc, Child), fill=Household),
              divider=ddecker(), na.rm=FALSE) + coord_flip()

# Spine example
ggplot(data = happy) +
 geom_mosaic(aes(weight = wtssall, x = product(health), fill = health)) +
 facet_grid(happy~.)

# Working on using other characters as the separators:
   ## current issue is that it has to be changed in two different places
set.separators(c(":", "_","|"))
employment <- as.data.frame(Employment)
ggplot(data = employment) +
 geom_mosaic(aes(weight=Freq, x=product(EmploymentLength, EmploymentStatus)))
}

